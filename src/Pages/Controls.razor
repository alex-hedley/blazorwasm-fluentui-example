@page "/controls"
@*@inject DataSource Data*@

<PageTitle>Controls</PageTitle>

<h1>Controls</h1>

<FluentBreadcrumb>
    <FluentBreadcrumbItem Href="#">
        Breadcrumb item 1
        <FluentIcon Slot="start" Name="@FluentIcons.Home" Size="@IconSize.Size16" Color=Color.Neutral />
    </FluentBreadcrumbItem>
    <FluentBreadcrumbItem Href="#">
        Breadcrumb item 2
        <FluentIcon Slot="start" Name="@FluentIcons.Clipboard" Size="@IconSize.Size16" Color=Color.Neutral />
    </FluentBreadcrumbItem>
    <FluentBreadcrumbItem>
        Breadcrumb item 3
        <FluentIcon Slot="start" Name="@FluentIcons.Money" Size="@IconSize.Size16" Color=Color.Neutral />
    </FluentBreadcrumbItem>
</FluentBreadcrumb>

<hr />

<FluentAccordion ActiveId="@activeId" OnAccordionItemChange="HandleOnAccordionItemChange">
    <FluentAccordionItem Heading="Panel one">
        <FluentIcon Slot="start" Name="@FluentIcons.Globe" Size="@IconSize.Size20" Color=Color.Neutral />
        Panel one content, using the 'start' slot for extra header content (in this case an icon)
    </FluentAccordionItem>
    <FluentAccordionItem Heading="Panel two">
        <div slot="end">
            #end#
        </div>
        Panel two content, using the 'end' slot for extra header content (in this case an HTML button)
    </FluentAccordionItem>
    <FluentAccordionItem Expanded="true" Heading="Panel three">
        Panel three content
    </FluentAccordionItem>
</FluentAccordion>

<p>Last changed accordion item: @changed?.Heading</p>

<hr />

<div>
    <FluentBadge Fill="highlight" Color="highlight">
        Badge
    </FluentBadge>
    <FluentBadge Fill="lowlight" Color="lowlight">
        Badge
    </FluentBadge>
</div>

<FluentCalendar DisabledDates=@disabledDates @bind-SelectedDates=@selectedDates DisabledSelectable=false></FluentCalendar>

<p>Selected dates</p>
<ul>
    @foreach (DateOnly date in selectedDates)
    {
        <li>@date.ToString("yyyy-MM-dd")</li>
    }
</ul>

<hr />

<p>With a label: </p>
<FluentCheckbox @bind-Value=value2>label</FluentCheckbox>

<hr />

@*<h4>With Placeholder</h4>
    <FluentCombobox Placeholder="Please select a size" Items="@Data.Sizes" @bind-Value="@size" />
    <p>
        Selected size: @size
    </p>*@

@code {
    // -----------------------------------
    // Accordion
    // -----------------------------------
    string activeId = "accordion-1";

    FluentAccordionItem? changed;

    private void HandleOnAccordionItemChange(FluentAccordionItem item)
    {
        changed = item;
    }

    // -----------------------------------
    // Calendar
    // -----------------------------------
    static int currentYear = DateTime.Now.Year;
    static int currentMonth = DateTime.Now.Month;

    static int daysInMonth = DateTime.DaysInMonth(currentYear, currentMonth) + 1;
    static Random random = new();

    List<DateOnly> disabledDates = new();
    List<DateOnly> selectedDates = new();

    protected override void OnInitialized()
    {
        for (int i = 0; i < 3; i++)
        {
            disabledDates.Add(new DateOnly(currentYear, currentMonth, random.Next(1, daysInMonth)));
            selectedDates.Add(new DateOnly(currentYear, currentMonth, random.Next(1, daysInMonth)));
        };
    }

    // -----------------------------------
    // Checkbox
    // -----------------------------------
    bool value2 = true;

    //// -----------------------------------
    //// Combobox
    //// -----------------------------------
    //string? name = "Nur Sari";
    //string? size = "";
}


@*
// -----------------------------------
// Dialog
// -----------------------------------
*@
<div>
    <p>
        When 'Modal' is checked, the dialog can be <em>dismissed</em> by clicking outside of the dialog (anywhere on the overlay). When unchecked,
        the dialog can be <em>dismissed</em> only by the 'ESC' key.<br />The dialog can always be <em>closed</em> by using the 'Close dialog'
        button.
    </p>
    <p>
        When 'Trap focus' is checked, only the elements within the dialog will receive focus. When unchecked, focus will also move outside of the
        dialog.
    </p>
    <FluentCheckbox Name="modal" @bind-Value="Modal">
        Modal
    </FluentCheckbox>
    <FluentCheckbox Name="trap" @bind-Value="TrapFocus">
        Trap focus
    </FluentCheckbox>
</div>
<div>
    <FluentDialog @ref="MyFluentDialog" aria-label="Simple dialog" Modal=@Modal TrapFocus=@TrapFocus @ondialogdismiss=OnDismiss>
        <h2>Just a simple dialog</h2>
        <p>The 'Close dialog' button is automatically focussed.</p>
        <p>The 'Another button' doesn't do anything other than showing receiving focus.</p>
        <FluentButton Appearance="Appearance.Accent" Autofocus="true" @onclick="OnClose">Close dialog</FluentButton>
        <FluentButton>Another button</FluentButton>
    </FluentDialog>
</div>

<p>Status: @status</p>

<FluentButton Appearance=Appearance.Accent @onclick="OnOpen">Open dialog</FluentButton>

@code {
    private FluentDialog? MyFluentDialog;
    public bool TrapFocus = true;
    public bool Modal = true;
    private string? status;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            MyFluentDialog!.Hide();
    }

    private void OnOpen()
    {
        status = "Dialog opened with button click";
        MyFluentDialog!.Show();
    }

    private void OnClose()
    {
        status = $"Dialog dismissed with reason: Close button clicked";
        MyFluentDialog!.Hide();

    }

    private void OnDismiss(DialogEventArgs args)
    {
        if (args is not null && args.Reason is not null && args.Reason == "dismiss")
        {
            status = $"Dialog dismissed with reason: Dismissed";
            MyFluentDialog!.Hide();
        }
    }
}