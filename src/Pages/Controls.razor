@page "/controls"
@*@inject DataSource Data*@
@inject ILogger<Controls> logger;

<PageTitle>Controls</PageTitle>

<h1>Controls</h1>

@*
    // -----------------------------------
    // Breadcrumb
    // -----------------------------------
*@

<h2>Breadcrumb</h2>

<FluentBreadcrumb>
    <FluentBreadcrumbItem Href="#">
        Breadcrumb item 1
        <FluentIcon Slot="start" Name="@FluentIcons.Home" Size="@IconSize.Size16" Color=Color.Neutral />
    </FluentBreadcrumbItem>
    <FluentBreadcrumbItem Href="#">
        Breadcrumb item 2
        <FluentIcon Slot="start" Name="@FluentIcons.Clipboard" Size="@IconSize.Size16" Color=Color.Neutral />
    </FluentBreadcrumbItem>
    <FluentBreadcrumbItem>
        Breadcrumb item 3
        <FluentIcon Slot="start" Name="@FluentIcons.Money" Size="@IconSize.Size16" Color=Color.Neutral />
    </FluentBreadcrumbItem>
</FluentBreadcrumb>

<FluentDivider></FluentDivider>

@*
    // -----------------------------------
    // Accordion
    // -----------------------------------
*@

<h2>Accordion</h2>

<FluentAccordion ActiveId="@activeId" OnAccordionItemChange="HandleOnAccordionItemChange">
    <FluentAccordionItem Heading="Panel one">
        <FluentIcon Slot="start" Name="@FluentIcons.Globe" Size="@IconSize.Size20" Color=Color.Neutral />
        Panel one content, using the 'start' slot for extra header content (in this case an icon)
    </FluentAccordionItem>
    <FluentAccordionItem Heading="Panel two">
        <div slot="end">
            #end#
        </div>
        Panel two content, using the 'end' slot for extra header content (in this case an HTML button)
    </FluentAccordionItem>
    <FluentAccordionItem Expanded="true" Heading="Panel three">
        Panel three content
    </FluentAccordionItem>
</FluentAccordion>

<p>Last changed accordion item: @changed?.Heading</p>

@code {
    string activeId = "accordion-1";

    FluentAccordionItem? changed;

    private void HandleOnAccordionItemChange(FluentAccordionItem item)
    {
        changed = item;
    }
}

<FluentDivider></FluentDivider>

@*
    // -----------------------------------
    // Badge
    // -----------------------------------
*@

<h2>Badge</h2>

<div>
    <FluentBadge Fill="highlight" Color="highlight">
        Badge
    </FluentBadge>
    <FluentBadge Fill="lowlight" Color="lowlight">
        Badge
    </FluentBadge>
</div>

@code {
}

<FluentDivider></FluentDivider>

@*
    // -----------------------------------
    // Calendar
    // -----------------------------------
*@

<h2>Calendar</h2>

<FluentCalendar DisabledDates=@disabledDates @bind-SelectedDates=@selectedDates DisabledSelectable=false></FluentCalendar>

<p>Selected dates</p>
<ul>
    @foreach (DateOnly date in selectedDates)
    {
        <li>@date.ToString("yyyy-MM-dd")</li>
    }
</ul>

@code {
    static int currentYear = DateTime.Now.Year;
    static int currentMonth = DateTime.Now.Month;

    static int daysInMonth = DateTime.DaysInMonth(currentYear, currentMonth) + 1;
    static Random random = new();

    List<DateOnly> disabledDates = new();
    List<DateOnly> selectedDates = new();

    protected override void OnInitialized()
    {
        for (int i = 0; i < 3; i++)
        {
            disabledDates.Add(new DateOnly(currentYear, currentMonth, random.Next(1, daysInMonth)));
            selectedDates.Add(new DateOnly(currentYear, currentMonth, random.Next(1, daysInMonth)));
        };
    }
}

<FluentDivider></FluentDivider>

@*
    // -----------------------------------
    // Checkbox
    // -----------------------------------
*@

<h2>Checkbox</h2>

<p>With a label: </p>
<FluentCheckbox @bind-Value=value2>label</FluentCheckbox>

@code {
    bool value2 = true;
}

<FluentDivider></FluentDivider>

@*
    // -----------------------------------
    // Combobox
    // -----------------------------------
*@

<h2>Combobox</h2>

@*<h4>With Placeholder</h4>
    <FluentCombobox Placeholder="Please select a size" Items="@Data.Sizes" @bind-Value="@size" />
    <p>
        Selected size: @size
    </p>*@

@code {
    //string? name = "Nur Sari";
    //string? size = "";
}

@*
    // -----------------------------------
    // Dialog
    // -----------------------------------
*@

<h2>Dialog</h2>

<div>
    <p>
        When 'Modal' is checked, the dialog can be <em>dismissed</em> by clicking outside of the dialog (anywhere on the overlay). When unchecked,
        the dialog can be <em>dismissed</em> only by the 'ESC' key.<br />The dialog can always be <em>closed</em> by using the 'Close dialog'
        button.
    </p>
    <p>
        When 'Trap focus' is checked, only the elements within the dialog will receive focus. When unchecked, focus will also move outside of the
        dialog.
    </p>
    <FluentCheckbox Name="modal" @bind-Value="Modal">
        Modal
    </FluentCheckbox>
    <FluentCheckbox Name="trap" @bind-Value="TrapFocus">
        Trap focus
    </FluentCheckbox>
</div>
<div>
    <FluentDialog @ref="MyFluentDialog" aria-label="Simple dialog" Modal=@Modal TrapFocus=@TrapFocus @ondialogdismiss=OnDismiss>
        <h2>Just a simple dialog</h2>
        <p>The 'Close dialog' button is automatically focussed.</p>
        <p>The 'Another button' doesn't do anything other than showing receiving focus.</p>
        <FluentButton Appearance="Appearance.Accent" Autofocus="true" @onclick="OnClose">Close dialog</FluentButton>
        <FluentButton>Another button</FluentButton>
    </FluentDialog>
</div>

<p>Status: @status</p>

<FluentButton Appearance=Appearance.Accent @onclick="OnOpen">Open dialog</FluentButton>

@code {
    private FluentDialog? MyFluentDialog;
    public bool TrapFocus = true;
    public bool Modal = true;
    private string? status;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            MyFluentDialog!.Hide();
    }

    private void OnOpen()
    {
        status = "Dialog opened with button click";
        MyFluentDialog!.Show();
    }

    private void OnClose()
    {
        status = $"Dialog dismissed with reason: Close button clicked";
        MyFluentDialog!.Hide();

    }

    private void OnDismiss(DialogEventArgs args)
    {
        if (args is not null && args.Reason is not null && args.Reason == "dismiss")
        {
            status = $"Dialog dismissed with reason: Dismissed";
            MyFluentDialog!.Hide();
        }
    }
}

<FluentDivider></FluentDivider>

@*
    // -----------------------------------
    // Emoji
    // -----------------------------------
*@

<h2>Emoji</h2>

<FluentEmoji Name="@FluentEmojis.Hamburger" EmojiStyle="EmojiStyle.Color" Size=@EmojiSize.Size32 />

@code {
}

<FluentDivider></FluentDivider>

@*
    // -----------------------------------
    // Flipper
    // -----------------------------------
*@

<h2>Flipper</h2>

<FluentFlipper Direction="FlipperDirection.Previous">
    <FluentIcon Name="@FluentIcons.ArrowCircleLeft" Slot="previous" Size="@IconSize.Size16" Variant=IconVariant.Filled Color=Color.Neutral />
</FluentFlipper>

<FluentFlipper Direction="FlipperDirection.Next">
    <FluentIcon Name="@FluentIcons.ArrowCircleRight" Slot="next" Size="@IconSize.Size16" Variant=IconVariant.Filled Color=Color.Neutral />
</FluentFlipper>

@code {
}

<FluentDivider />

@*
    // -----------------------------------
    // Horizontal Scroll
    // -----------------------------------
*@

<h2>Horizontal Scroll</h2>

@*
    <FluentHorizontalScroll class="both-gradient" Speed="600" Easing="ScrollEasing.EaseInOut">
        <FluentCard>Card number 1</FluentCard>
        <FluentCard>Card number 2</FluentCard>
        <FluentCard>Card number 3</FluentCard>
        <FluentCard>Card number 4</FluentCard>
        <FluentCard style="width:140px;height:160px">Card number 5</FluentCard>
        <FluentCard>Card number 6</FluentCard>
        <FluentCard>Card number 7</FluentCard>
        <FluentCard>Card number 8</FluentCard>
        <FluentCard>Card number 9</FluentCard>
        <FluentCard>Card number 10</FluentCard>
        <FluentCard>Card number 11</FluentCard>
        <FluentCard>Card number 12</FluentCard>
        <FluentCard>Card number 13</FluentCard>
        <FluentCard>Card number 14</FluentCard>
        <FluentCard>Card number 15</FluentCard>
        <FluentCard>Card number 16</FluentCard>
    </FluentHorizontalScroll>

    <FluentButton @onclick="() => _horizontalScroll.ScrollToPrevious()">Scroll to Previous</FluentButton>
    <FluentButton @onclick="() => _horizontalScroll.ScrollToNext()">Scroll to Next</FluentButton>
    <FluentButton @onclick="() => _horizontalScroll.ScrollInView(10)">Scroll to 10</FluentButton>

    @inject ILogger<Controls> logger;

    @code {
        FluentHorizontalScroll _horizontalScroll = default!;

        private void OnHorizontalScrollStart(HorizontalScrollEventArgs args)
        {
            logger.LogInformation($"{args.Scroll}");
        }

        private void OnHorizontalScrollEnd(HorizontalScrollEventArgs args)
        {
            logger.LogInformation($"{args.Scroll}");
        }
    }
*@

<FluentDivider />

@*
    // -----------------------------------
    // Icon
    // -----------------------------------
*@

<h2>Icon</h2>

<FluentIcon Name="@FluentIcons.Alert" Size="IconSize.Size48" Variant=IconVariant.Filled Color="Color.Neutral" />

@code {
}

<FluentDivider />

@*
    // -----------------------------------
    // Listbox
    // -----------------------------------
*@

<h2>Listbox</h2>

<FluentListbox TOption="string" ValueChanged="@(e => listboxValue = e)">
    <FluentOption>This option has no value</FluentOption>
    <FluentOption Value="Item 1" Disabled="true">This option is disabled</FluentOption>
    <FluentOption Value="Item 2">This option has a value</FluentOption>
    <FluentOption Value="Item 3">
        <FluentIcon Name="@FluentIcons.Folder" Slot="start" Size="IconSize.Size16"></FluentIcon>
        This option has <b>an icon</b>
    </FluentOption>
    <FluentOption Value="Item 4" Selected=true>
        <div style="display:flex; flex-direction:row">
            <img style="width:20px" src="flags/nl.svg" />This option is selected by default
        </div>
    </FluentOption>
</FluentListbox>

<p>Selected: @listboxValue</p>

@code {
    string? listboxValue = "Item 4";
}

@*
    // -----------------------------------
    // Menu
    // -----------------------------------
*@

<h2>Menu</h2>

<FluentMenu>
    <FluentMenuItem>Menu item 1</FluentMenuItem>
    <FluentMenuItem>Menu item 2</FluentMenuItem>
    <FluentMenuItem>Menu item 3</FluentMenuItem>
    <FluentDivider></FluentDivider>
    <FluentMenuItem Role="MenuItemRole.MenuItemCheckbox">Checkbox 1</FluentMenuItem>
    <FluentMenuItem Role="MenuItemRole.MenuItemCheckbox">
        Checkbox 2
        <FluentIcon Name="@FluentIcons.Globe" Slot="checkbox-indicator" Size="@IconSize.Size16" Color=Color.Neutral />
    </FluentMenuItem>
    <FluentDivider></FluentDivider>
    <FluentMenuItem Role="MenuItemRole.MenuItemRadio">Radio 1.1</FluentMenuItem>
    <FluentMenuItem Role="MenuItemRole.MenuItemRadio">Radio 1.2</FluentMenuItem>
</FluentMenu>

<FluentMenu>
    <FluentMenuItem>
        Menu item 1
        <FluentMenu slot="submenu">
            <FluentMenuItem>Menu item 1.1</FluentMenuItem>
            <FluentMenuItem>Menu item 1.2</FluentMenuItem>
            <FluentMenuItem>Menu item 1.3</FluentMenuItem>
        </FluentMenu>
    </FluentMenuItem>
    <FluentMenuItem>
        Menu item 2
        <FluentMenu slot="submenu">
            <FluentMenuItem>Menu item 2.1</FluentMenuItem>
            <FluentMenuItem>Menu item 2.2</FluentMenuItem>
            <FluentMenuItem>Menu item 2.3</FluentMenuItem>
        </FluentMenu>
    </FluentMenuItem>
    <FluentMenuItem>
        Menu item 3
        <FluentMenu slot="submenu">
            <FluentMenuItem>Menu item 3.1</FluentMenuItem>
            <FluentMenuItem>Menu item 3.2</FluentMenuItem>
            <FluentMenuItem>Menu item 3.3</FluentMenuItem>
        </FluentMenu>
    </FluentMenuItem>
</FluentMenu>

@code {
}

<FluentDivider />

@*
    // -----------------------------------
    // NumberField
    // -----------------------------------
*@

<h2>NumberField</h2>

<FluentNumberField @bind-Value=value1 Placeholder="Placeholder"></FluentNumberField>

@code {
    int? value1 = 1;
}

<FluentDivider />

@*
    // -----------------------------------
    // Select / Option
    // -----------------------------------
*@

<h2>Select / Option</h2>

<FluentSelect Value=2 TOption="int">
    <FluentOption Value=1>
        <FluentIcon Name="@FluentIcons.Globe" Slot="start" Size="@IconSize.Size16" Color=Color.Neutral />
        <FluentIcon Name="@FluentIcons.Globe" Slot="end" Size="@IconSize.Size16" Color=Color.Neutral />
        This option has an icon in its start and end slots.
    </FluentOption>
    <FluentOption Value=2>
        <FluentIcon Name="@FluentIcons.Globe" Slot="start" Size="@IconSize.Size16" Color=Color.Neutral />
        This option has an icon in its start slot.
    </FluentOption>
    <FluentOption Value=3>
        <FluentIcon Name="@FluentIcons.Globe" Slot="end" Size="@IconSize.Size16" Color=Color.Neutral />
        This option has an icon in its end slot.
    </FluentOption>
</FluentSelect>

@code {
}

<FluentDivider />

@*
    // -----------------------------------
    // Progress
    // -----------------------------------
*@

<h2>Progress</h2>

<FluentProgress></FluentProgress>

@code {
}

<FluentDivider />

@*
    // -----------------------------------
    // ProgressRing
    // -----------------------------------
*@

<h2>ProgressRing</h2>

<FluentProgressRing></FluentProgressRing>

@code {
}

<FluentDivider />

@*
    // -----------------------------------
    // RadioGroup / Radio
    // -----------------------------------
*@

<h2>RadioGroup / Radio</h2>

<FluentRadioGroup @bind-Value="pilot" Name="best-pilot">
    <label id="label4" slot="label">Preset selected-value</label>
    <FluentRadio Value="@("ice-man")">Ice Man</FluentRadio>
    <FluentRadio Value="@("maverick")">Maverick</FluentRadio>
    <FluentRadio Value="@("viper")">Viper</FluentRadio>
    <FluentRadio Value="@("jester")">Jester</FluentRadio>
</FluentRadioGroup>
<p>The best pilot according to you is: @pilot!</p>

@code {
    string? pilot = "maverick";
}

<FluentDivider />

@*
    // -----------------------------------
    // Search
    // -----------------------------------
*@

<h2>Search</h2>

<FluentSearch @bind-Value=value>Label</FluentSearch>

@code {
    string? value;
}

<FluentDivider />

@*
    // -----------------------------------
    // Select
    // -----------------------------------
*@

<h2>Select</h2>

<FluentSelect ValueChanged="@(e => selectValue2 = e)" TOption="string">
    <FluentOption Value="1">
        Search
        <FluentIcon Name="@FluentIcons.Search" Slot="start" Size="IconSize.Size20" Color="Color.Neutral" />
    </FluentOption>
    <FluentOption Value="2" Selected="true">
        Show
        <FluentIcon Name="@FluentIcons.AppsList" Slot="start" Size="IconSize.Size20" Color="Color.Neutral" />
    </FluentOption>
    <FluentOption Value="3">
        Generate
        <FluentIcon Name="@FluentIcons.Code" Slot="start" Size="IconSize.Size20" Color="Color.Neutral" />
    </FluentOption>
    <FluentOption Value="4">
        Update
        <FluentIcon Name="@FluentIcons.ArrowSync" Slot="start" Size="IconSize.Size20" Color="Color.Neutral" />
    </FluentOption>
    <FluentOption Value="4">
        About
        <FluentIcon Name="@FluentIcons.Info" Slot="start" Size="IconSize.Size20" Color="Color.Neutral" />
    </FluentOption>

</FluentSelect>

@code {
    string? selectValue2;
}

<FluentDivider />

@*
    // -----------------------------------
    // Skeleton
    // -----------------------------------
*@

<h2>Skeleton</h2>

<FluentCard class="card-padding">
    <FluentSkeleton style="border-radius: 4px; width: 50px; height: 50px;" Shape="SkeletonShape.Circle" Shimmer="true"></FluentSkeleton>
    <FluentSkeleton style="border-radius: 4px; margin-top: 10px; height: 10px;" Shape="SkeletonShape.Rect" Shimmer="true"></FluentSkeleton>
    <FluentSkeleton style="border-radius: 4px; margin-top: 10px; height: 10px;" Shape="SkeletonShape.Rect" Shimmer="true"></FluentSkeleton>
    <FluentSkeleton style="border-radius: 4px; margin-top: 10px; height: 10px;" Shape="SkeletonShape.Rect" Shimmer="true"></FluentSkeleton>
    <FluentSkeleton style="
                border-radius: 4px;
                width: 75px;
                height: 30px;
                margin-top: 20px;
                margin-bottom: 10px;
            "
                    Shape="SkeletonShape.Rect"
                    Shimmer="true"></FluentSkeleton>
</FluentCard>

@code {
}

<FluentDivider />

@*
    // -----------------------------------
    // Slider
    // -----------------------------------
*@

<h2>Slider</h2>

<div style="margin-bottom: 60px;">
    <FluentButton style="width: 90px; margin: 10px;" @onclick="() => orientation = (orientation == Orientation.Vertical) ? Orientation.Horizontal : Orientation.Vertical">Toggle orientation</FluentButton>
    <FluentSlider Orientation="@orientation" Min="0" Max="100" Step="10" @bind-Value=value3>
        <FluentSliderLabel Position="0">0&#8451;</FluentSliderLabel>
        <FluentSliderLabel Position="10">10&#8451;</FluentSliderLabel>
        <FluentSliderLabel Position="90">90&#8451;</FluentSliderLabel>
        <FluentSliderLabel Position="100">100&#8451;</FluentSliderLabel>
    </FluentSlider>
</div>

@code {
    Orientation orientation = Orientation.Horizontal;
    int value3 = 70;
}

<FluentDivider />

@*
    // -----------------------------------
    // Switch
    // -----------------------------------
*@

<h2>Switch</h2>

<FluentSwitch @bind-Value=value4></FluentSwitch>

@code {
    bool value4 = true;
}

<FluentDivider />

@*
    // -----------------------------------
    // Tab
    // -----------------------------------
*@

<h2>Tab</h2>

<FluentTabs ActiveId="@activeid" OnTabChange="HandleOnTabChange">
    <FluentTab Text="Tab one"></FluentTab>
    <FluentTab Text="Tab two" />
    <FluentTab Text="Tab three" />
    <FluentTabPanel>
        Tab one content. This is for testing.
    </FluentTabPanel>
    <FluentTabPanel>
        Tab two content. This is for testing.
    </FluentTabPanel>
    <FluentTabPanel>
        Tab three content. This is for testing.
    </FluentTabPanel>
    <div>Testing</div>
</FluentTabs>

<p>Active tab changed to: @changedto?.Text</p>

<p><FluentIcon Name="@FluentIcons.Warning" Size="@IconSize.Size24" Variant="@IconVariant.Regular" Color="@Color.Warning" />Clicking on tab 2 jumps to 3 first?</p>

@code {
    string? activeid = "tab-1";
    FluentTab? changedto;

    private void HandleOnTabChange(FluentTab tab)
    {
        changedto = tab;
    }
}

<FluentDivider />

@*
    // -----------------------------------
    // TextArea
    // -----------------------------------
*@

<h2>TextArea</h2>

<FluentTextArea @bind-Value=value5 Placeholder="Placeholder" style="width: 100%;"></FluentTextArea>

@code {
    string? value5;
}

<FluentDivider />

@*
    // -----------------------------------
    // TextField
    // -----------------------------------
*@

<h2>TextField</h2>

<FluentTextField @bind-Value=value6
                 Placeholder="Placeholder"
                 Required="false"
                 Readonly="false"
                 Disabled="false"></FluentTextField>

@code {
    string? value6;
}

<FluentDivider />

@*
    // -----------------------------------
    // Toolbar
    // -----------------------------------
*@

<h2>Toolbar</h2>

@inject FillColor FillColor
@inject BaseLayerLuminance BaseLayerLuminance

<FluentToolbar id="toolbar-fluent-components">
    <FluentButton Appearance="Appearance.Accent">Accent Button</FluentButton>
    <FluentButton Appearance="Appearance.Stealth">Stealth Button</FluentButton>
    <FluentRadioGroup @bind-Value=value7>
        <FluentRadio Value=@("one") Checked="true">One</FluentRadio>
        <FluentRadio Value=@("two")>Two</FluentRadio>
        <FluentRadio Value=@("three")>Three</FluentRadio>
    </FluentRadioGroup>
    <FluentCombobox Class="below outline" @bind-Value="@comboboxValue" TOption="string">
        <FluentOption id="option-2">Please Please Me</FluentOption>
        <FluentOption id="option-3">With The Beatles</FluentOption>
        <FluentOption id="option-4">A Hard Day's Night</FluentOption>
        <FluentOption id="option-5">Beatles for Sale</FluentOption>
        <FluentOption id="option-6">Help!</FluentOption>
        <FluentOption id="option-7">Rubber Soul</FluentOption>
        <FluentOption id="option-8">Revolver</FluentOption>
        <FluentOption id="option-9">Sgt. Pepper's Lonely Hearts Club Band</FluentOption>
        <FluentOption id="option-10">Magical Mystery Tour</FluentOption>
        <FluentOption id="option-11">The Beatles</FluentOption>
        <FluentOption id="option-12">Yellow Submarine</FluentOption>
        <FluentOption id="option-13">Abbey Road</FluentOption>
        <FluentOption id="option-14">Let It Be</FluentOption>
    </FluentCombobox>
    <FluentButton>Button</FluentButton>
    <FluentSelect Class="below outline" @bind-Value="@comboboxValue" TOption="string">
        <FluentOption id="option-15">Option 1</FluentOption>
        <FluentOption id="option-16">Second option</FluentOption>
        <FluentOption id="option-17">Option 3</FluentOption>
    </FluentSelect>
    <FluentCheckbox @bind-Value=check1>Checkbox</FluentCheckbox>
</FluentToolbar>

<div style="padding:10px">
    <FluentToolbar id="toolbar-fluent-components-two" style="width:100%" @ref=Toolbar>
        <FluentRadioGroup @bind-Value=value8>
            <FluentRadio Value=@("one") Checked="true">Add</FluentRadio>
            <FluentRadio Value=@("two")>Open</FluentRadio>
            <FluentRadio Value=@("three")>Copy</FluentRadio>
            <FluentRadio Value=@("four")>Export</FluentRadio>
            <FluentRadio Value=@("five")>Automate</FluentRadio>
        </FluentRadioGroup>
        <FluentButton Appearance="Appearance.Stealth">Stealth</FluentButton>
        <FluentButton Appearance="Appearance.Accent">Refresh</FluentButton>
        <FluentBadge>21 items</FluentBadge>
        <FluentRadioGroup @bind-Value=value9 slot="end">
            <FluentRadio>Filter</FluentRadio>
            <FluentRadio>
                <FluentTextField @bind-Value=text1 Placeholder="Search" Appearance="Appearance.Outline"></FluentTextField>
            </FluentRadio>
        </FluentRadioGroup>
    </FluentToolbar>
</div>

@code {
    string? comboboxValue;
    FluentToolbar? Toolbar;
    string? value7 = "one", value8 = "two", value9;
    bool check1;
    string? text1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FillColor.SetValueFor(Toolbar!.Element, "#333".ToSwatch());
            await BaseLayerLuminance.SetValueFor(Toolbar!.Element, (float)0.15);

            StateHasChanged();
        }
    }
}

<FluentDivider />

@*
    // -----------------------------------
    // Tooltip
    // -----------------------------------
*@

<h2>Tooltip</h2>

<div style="height:100px; display: flex; gap: 10px; margin: 2em; flex-direction: row; align-items: center; justify-content: center;">
    <FluentButton id="visible1" Appearance=Appearance.Accent @onclick=ToggleVisible>Click me to toggle tooltip visibility</FluentButton>
    <FluentTooltip Anchor="visible1" Position=TooltipPosition.End Delay=200 Visible=@visible @ontooltipdismiss=OnTTDismiss>I'm helping!</FluentTooltip>
</div>
@code {
    bool visible = true;

    private void OnTTDismiss()
    {
        visible = false;
        logger.LogInformation("Tooltip dismissed!");
    }

    private void ToggleVisible()
    {
        visible = !visible;
    }
}

<FluentDivider />


@*
    // -----------------------------------
    // TreeView
    // -----------------------------------
*@

<h2>TreeView</h2>

<FluentTreeView @bind-CurrentSelected=currentSelected OnExpandedChange="HandleOnExpandedChanged">
    <FluentTreeItem Expanded="true">
        Root item
        <FluentIcon Name="@FluentIcons.Globe" Slot="start" Size="@IconSize.Size16" Color=Color.Neutral />
        <FluentTreeItem Expanded="true">
            Nested Root item 1
            <FluentIcon Name="@FluentIcons.Globe" Slot="start" Size="@IconSize.Size16" Color=Color.Neutral />
            <FluentTreeItem>
                <FluentIcon Name="@FluentIcons.Globe" Slot="start" Size="@IconSize.Size16" Color=Color.Neutral />
                Nested item 4
            </FluentTreeItem>
            <FluentTreeItem>
                Nested item 5
            </FluentTreeItem>
        </FluentTreeItem>
        <FluentTreeItem>
            Nested item 2
        </FluentTreeItem>
        <FluentTreeItem>
            Nested item 3
            <FluentIcon Name="@FluentIcons.Globe" Slot="start" Size="@IconSize.Size16" Color=Color.Neutral />
        </FluentTreeItem>
    </FluentTreeItem>
</FluentTreeView>

<p>Current selected tree item is @currentSelected?.Text</p>
<p>Current expanded/collapsed tree item is @currentAffected?.Text</p>

@code {
    FluentTreeItem? currentSelected;
    FluentTreeItem? currentAffected;

    private void HandleOnExpandedChanged(FluentTreeItem item)
    {
        currentAffected = item;
    }
}

<FluentDivider />

<br />